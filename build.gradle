import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder
import org.junit.platform.launcher.core.LauncherFactory
import org.junit.platform.launcher.listeners.SummaryGeneratingListener

import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns
import static org.junit.platform.engine.discovery.DiscoverySelectors.selectPackage

buildscript {
    ext.kotlin_version = '1.1.3'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M5'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

repositories {
    mavenLocal()
    maven { url "http://dl.bintray.com/kboom/scherule" }
    maven { url "http://dl.bintray.com/cy6ergn0m/maven" }
    mavenCentral()
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'

version = '1.0-SNAPSHOT'
sourceCompatibility = '1.8'
mainClassName = 'com.scherule.calendaring.CalendaringApplication'

def vertxVersion = '3.4.2'
def mainVerticleName = 'com.scherule.calendaring.CalendaringRootVerticle'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

dependencies {
    compile "com.scherule:scherule-commons:1.1"
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.1.1'
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-web:$vertxVersion"
    compile "io.vertx:vertx-reactive-streams:$vertxVersion"
    compile "io.vertx:vertx-service-discovery:$vertxVersion"
    compile "io.vertx:vertx-hazelcast:$vertxVersion"
    compile 'org.jetbrains.kotlinx:vertx3-lang-kotlin:0.0.+'
    compile group: 'com.rabbitmq', name: 'amqp-client', version: '4.1.1'
    compile 'com.google.inject:guice:4.1.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.9'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: '2.8.9'
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.8.7"
    compile group: 'com.google.inject.extensions', name: 'guice-multibindings', version: '4.1.0'
    compile group: 'org.ektorp', name: 'org.ektorp', version: '1.4.4'
    compile group: 'joda-time', name: 'joda-time', version: '2.9.9'
    compileOnly "io.vertx:vertx-codegen:$vertxVersion"
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M5'
    testRuntime 'org.junit.platform:junit-platform-launcher:1.0.0-M5'
    testRuntime 'org.junit.platform:junit-platform-runner:1.0.0-M5'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M5'
    testCompile "io.vertx:vertx-unit:$vertxVersion"
    testCompile 'io.rest-assured:rest-assured:3.0.3'
    testCompile 'io.rest-assured:json-path:3.0.3'
    testCompile 'io.rest-assured:json-schema-validator:3.0.3'
}

task annotationProcessing(type: JavaCompile, group: 'build') {
    dependsOn tasks.getByPath('compileKotlin')
    source = [sourceSets.main.java, sourceSets.main.kotlin]
    classpath = configurations.compile + configurations.compileOnly + files(compileKotlin.destinationDir)
    destinationDir = project.file('src/main/generated')
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor",
            "-Acodegen.output=${project.projectDir}/src/main"
    ]
}

task integrationTests(dependsOn: "test") {
    doLast {
        def request = LauncherDiscoveryRequestBuilder.request()
                .selectors(selectPackage("com.scherule.calendaring"))
                .filters(includeClassNamePatterns(".*IntegrationTest"))
                .build()

        def launcher = LauncherFactory.create()

        def listener = new SummaryGeneratingListener()
        launcher.registerTestExecutionListeners(listener)
        launcher.execute(request)
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = sourceCompatibility
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = sourceCompatibility
    }
}

compileJava {
    targetCompatibility = sourceCompatibility
    sourceCompatibility = sourceCompatibility

    dependsOn annotationProcessing
}


sourceSets {
    main {
        java {
            srcDirs += 'src/main/generated'
        }
    }
}

shadowJar {
    archiveName = 'scherule-calendaring-fat.jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'Main-Verticle': mainVerticleName
    }
}

junitPlatform {
    platformVersion '1.0.0-M5'
    logManager 'java.util.logging.LogManager'
    enableStandardTestTask true
}


run {
    args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}